// This file is automatically generated. Do not edit it directly.
// @ts-nocheck
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://vwhwufnckpqirxptwncw.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ3aHd1Zm5ja3BxaXJ4cHR3bmN3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzkzODI5MjAsImV4cCI6MjA1NDk1ODkyMH0.Wjw8MAnsBrHxB6-J-bNGObgDQ4fl3zPYrgYI5tOrcKo";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create custom supabase client with dynamic headers
const createCustomSupabaseClient = () => {
  return createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: true,
      flowType: 'pkce',
      debug: process.env.NODE_ENV === 'development',
      storage: typeof window !== 'undefined' ? window.localStorage : undefined,
      storageKey: 'supabase.auth.token',
      onAuthStateChange: (event, session) => {
        if (process.env.NODE_ENV === 'development') {
          console.log('Supabase auth state changed:', event, session?.user?.email);
        }
      }
    },
    global: {
      headers: {
        'X-Client-Info': 'ngs-app',
        get 'X-User-ID'() {
          return typeof window !== 'undefined' ? localStorage.getItem('user_id') || '' : '';
        },
        get 'X-Project-ID'() {
          return typeof window !== 'undefined' ? localStorage.getItem('project_id') || '' : '';
        },
        get 'X-Custom-JWT'() {
          return typeof window !== 'undefined' ? localStorage.getItem('session_token') || '' : '';
        }
      }
    }
  });
};

export const supabase = createCustomSupabaseClient();

// Custom auth için user_id'yi localStorage'a set et
export const setCurrentUserId = (userId: string) => {
  if (typeof window !== 'undefined') {
    localStorage.setItem('user_id', userId);
    console.log('Current user ID set:', userId);
  }
};

// Current user_id'yi temizle
export const clearCurrentUserId = () => {
  if (typeof window !== 'undefined') {
    localStorage.removeItem('user_id');
    console.log('Current user ID cleared');
  }
};

// Project ID için yardımcı fonksiyonlar
export const setCurrentProjectId = (projectId: string) => {
  if (typeof window !== 'undefined') {
    localStorage.setItem('project_id', projectId);
    console.log('Current project ID set:', projectId);
  }
};

export const clearCurrentProjectId = () => {
  if (typeof window !== 'undefined') {
    localStorage.removeItem('project_id');
    console.log('Current project ID cleared');
  }
};