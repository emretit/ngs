{
  "name": "E-Invoice Full Automation",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "einvoice-automation",
        "options": {}
      },
      "id": "webhook-einvoice",
      "name": "Webhook - Proposal Accepted",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [220, 300],
      "webhookId": "einvoice-automation-trigger"
    },
    {
      "parameters": {
        "url": "https://vwhwufnckpqirxptwncw.supabase.co/rest/v1/proposals?id=eq.{{ $json.parameters.proposal_id }}",
        "authentication": "generic",
        "genericAuthType": "httpHeaderAuth",
        "httpHeaderAuth": {
          "name": "Authorization",
          "value": "Bearer {{ $vars.SUPABASE_SERVICE_KEY }}"
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "{{ $vars.SUPABASE_ANON_KEY }}"
            }
          ]
        }
      },
      "id": "get-proposal",
      "name": "Get Proposal Details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [440, 300]
    },
    {
      "parameters": {
        "url": "https://vwhwufnckpqirxptwncw.supabase.co/rest/v1/customers?id=eq.{{ $json.parameters.customer_id }}",
        "authentication": "generic",
        "genericAuthType": "httpHeaderAuth",
        "httpHeaderAuth": {
          "name": "Authorization",
          "value": "Bearer {{ $vars.SUPABASE_SERVICE_KEY }}"
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "{{ $vars.SUPABASE_ANON_KEY }}"
            }
          ]
        }
      },
      "id": "get-customer",
      "name": "Get Customer Details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [440, 400]
    },
    {
      "parameters": {
        "jsCode": "// Generate XML for e-invoice using existing template logic\nconst proposal = $input.first().json[0];\nconst customer = $input.last().json[0];\n\n// E-Invoice XML Template (simplified)\nconst xmlTemplate = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Invoice xmlns=\"urn:oasis:names:specification:ubl:schema:xsd:Invoice-2\"\n         xmlns:cac=\"urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2\"\n         xmlns:cbc=\"urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2\">\n    <cbc:UBLVersionID>2.1</cbc:UBLVersionID>\n    <cbc:ID>${proposal.number || new Date().getTime()}</cbc:ID>\n    <cbc:IssueDate>${new Date().toISOString().split('T')[0]}</cbc:IssueDate>\n    <cbc:InvoiceTypeCode>SATIS</cbc:InvoiceTypeCode>\n    <cbc:DocumentCurrencyCode>TRY</cbc:DocumentCurrencyCode>\n    \n    <!-- Supplier Info -->\n    <cac:AccountingSupplierParty>\n        <cac:Party>\n            <cac:PartyIdentification>\n                <cbc:ID schemeID=\"VKN\">${process.env.COMPANY_VKN}</cbc:ID>\n            </cac:PartyIdentification>\n            <cac:PartyName>\n                <cbc:Name>${process.env.COMPANY_NAME}</cbc:Name>\n            </cac:PartyName>\n        </cac:Party>\n    </cac:AccountingSupplierParty>\n    \n    <!-- Customer Info -->\n    <cac:AccountingCustomerParty>\n        <cac:Party>\n            <cac:PartyIdentification>\n                <cbc:ID schemeID=\"VKN\">${customer.tax_number}</cbc:ID>\n            </cac:PartyIdentification>\n            <cac:PartyName>\n                <cbc:Name>${customer.name}</cbc:Name>\n            </cac:PartyName>\n        </cac:Party>\n    </cac:AccountingCustomerParty>\n    \n    <!-- Invoice Lines -->\n    <cac:InvoiceLine>\n        <cbc:ID>1</cbc:ID>\n        <cbc:InvoicedQuantity unitCode=\"C62\">1</cbc:InvoicedQuantity>\n        <cbc:LineExtensionAmount currencyID=\"TRY\">${proposal.subtotal || proposal.total_amount}</cbc:LineExtensionAmount>\n        <cac:Item>\n            <cbc:Name>${proposal.title}</cbc:Name>\n        </cac:Item>\n        <cac:Price>\n            <cbc:PriceAmount currencyID=\"TRY\">${proposal.subtotal || proposal.total_amount}</cbc:PriceAmount>\n        </cac:Price>\n    </cac:InvoiceLine>\n    \n    <!-- Tax Total -->\n    <cac:TaxTotal>\n        <cbc:TaxAmount currencyID=\"TRY\">${proposal.tax_amount || (proposal.total_amount * 0.18)}</cbc:TaxAmount>\n    </cac:TaxTotal>\n    \n    <!-- Legal Monetary Total -->\n    <cac:LegalMonetaryTotal>\n        <cbc:LineExtensionAmount currencyID=\"TRY\">${proposal.subtotal || proposal.total_amount}</cbc:LineExtensionAmount>\n        <cbc:TaxExclusiveAmount currencyID=\"TRY\">${proposal.subtotal || proposal.total_amount}</cbc:TaxExclusiveAmount>\n        <cbc:TaxInclusiveAmount currencyID=\"TRY\">${proposal.total_amount}</cbc:TaxInclusiveAmount>\n        <cbc:PayableAmount currencyID=\"TRY\">${proposal.total_amount}</cbc:PayableAmount>\n    </cac:LegalMonetaryTotal>\n</Invoice>`;\n\nreturn {\n  xml: xmlTemplate,\n  invoiceData: {\n    proposal,\n    customer,\n    amount: proposal.total_amount,\n    invoiceNumber: proposal.number || `INV-${new Date().getTime()}`\n  }\n};"
      },
      "id": "generate-xml",
      "name": "Generate E-Invoice XML",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [660, 350]
    },
    {
      "parameters": {
        "url": "{{ $vars.VERIBAN_SOAP_ENDPOINT }}",
        "authentication": "generic",
        "genericAuthType": "httpHeaderAuth",
        "httpHeaderAuth": {
          "name": "Authorization",
          "value": "Basic {{ $vars.VERIBAN_AUTH_TOKEN }}"
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "text/xml; charset=utf-8"
            },
            {
              "name": "SOAPAction",
              "value": "\"http://tempuri.org/IEInvoiceService/SendInvoice\""
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "body": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:tem=\"http://tempuri.org/\">\n    <soap:Header/>\n    <soap:Body>\n        <tem:SendInvoice>\n            <tem:username>{{ $vars.VERIBAN_USERNAME }}</tem:username>\n            <tem:password>{{ $vars.VERIBAN_PASSWORD }}</tem:password>\n            <tem:invoiceXml><![CDATA[{{ $json.xml }}]]></tem:invoiceXml>\n        </tem:SendInvoice>\n    </soap:Body>\n</soap:Envelope>"
      },
      "id": "send-to-veriban",
      "name": "Send to Veriban API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [880, 350]
    },
    {
      "parameters": {
        "jsCode": "// Wait for invoice processing (simplified delay)\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\nawait delay(5000); // Wait 5 seconds\n\n// Simulate PDF download URL (in real implementation, extract from Veriban response)\nconst invoiceData = $input.first().json.invoiceData;\nconst pdfUrl = `${process.env.VERIBAN_PDF_BASE_URL}/invoice-${invoiceData.invoiceNumber}.pdf`;\n\nreturn {\n  pdfUrl,\n  invoiceData,\n  veribanResponse: $input.last().json\n};"
      },
      "id": "process-response",
      "name": "Process Veriban Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1100, 350]
    },
    {
      "parameters": {
        "url": "={{ $json.pdfUrl }}",
        "responseFormat": "file",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "file",
              "outputPropertyName": "pdfData"
            }
          }
        }
      },
      "id": "download-pdf",
      "name": "Download Invoice PDF",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1320, 250]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "resource": "file",
        "operation": "upload",
        "folderId": "{{ $vars.GOOGLE_DRIVE_INVOICE_FOLDER_ID }}",
        "name": "Invoice-{{ $json.invoiceData.invoiceNumber }}.pdf",
        "binaryData": true,
        "binaryPropertyName": "pdfData"
      },
      "id": "upload-to-drive",
      "name": "Upload to Google Drive",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [1540, 250]
    },
    {
      "parameters": {
        "fromEmail": "{{ $vars.FROM_EMAIL }}",
        "toEmail": "={{ $('get-customer').item.json[0].email }}",
        "subject": "Invoice Ready - {{ $json.invoiceData.invoiceNumber }}",
        "message": "Dear {{ $('get-customer').item.json[0].name }},\n\nYour invoice {{ $json.invoiceData.invoiceNumber }} has been generated and is ready.\n\nAmount: â‚º{{ $json.invoiceData.amount }}\n\nYou can download the invoice PDF from the link below:\n{{ $json.webViewLink }}\n\nThank you for your business!\n\nBest regards,\n{{ $vars.COMPANY_NAME }} Team",
        "attachments": "pdfData",
        "options": {}
      },
      "id": "email-customer",
      "name": "Email Invoice to Customer",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [1540, 350]
    },
    {
      "parameters": {
        "url": "https://vwhwufnckpqirxptwncw.supabase.co/rest/v1/einvoices_sent",
        "authentication": "generic",
        "genericAuthType": "httpHeaderAuth",
        "httpHeaderAuth": {
          "name": "Authorization",
          "value": "Bearer {{ $vars.SUPABASE_SERVICE_KEY }}"
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "{{ $vars.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "body": {
          "invoice_id": "={{ $json.invoiceData.invoiceNumber }}",
          "customer_vkn": "={{ $('get-customer').item.json[0].tax_number }}",
          "customer_name": "={{ $('get-customer').item.json[0].name }}",
          "total_amount": "={{ $json.invoiceData.amount }}",
          "invoice_date": "={{ $now.toISOString().split('T')[0] }}",
          "xml_content": "={{ $('generate-xml').item.json.xml }}",
          "invoice_state": 1,
          "user_id": "={{ $('webhook-einvoice').item.json.user_id }}"
        }
      },
      "id": "update-accounting",
      "name": "Update Accounting System",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1540, 450]
    }
  ],
  "pinData": {},
  "connections": {
    "webhook-einvoice": {
      "main": [
        [
          {
            "node": "get-proposal",
            "type": "main",
            "index": 0
          },
          {
            "node": "get-customer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get-proposal": {
      "main": [
        [
          {
            "node": "generate-xml",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get-customer": {
      "main": [
        [
          {
            "node": "generate-xml",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "generate-xml": {
      "main": [
        [
          {
            "node": "send-to-veriban",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "send-to-veriban": {
      "main": [
        [
          {
            "node": "process-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "process-response": {
      "main": [
        [
          {
            "node": "download-pdf",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "download-pdf": {
      "main": [
        [
          {
            "node": "upload-to-drive",
            "type": "main",
            "index": 0
          },
          {
            "node": "email-customer",
            "type": "main",
            "index": 0
          },
          {
            "node": "update-accounting",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2",
  "id": "2",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "tags": []
}